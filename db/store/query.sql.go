// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createFeed = `-- name: CreateFeed :one
insert into
    feeds (id, title, description)
values ($1, $2, $3)
returning
    id, title, description, created_at, updated_at
`

type CreateFeedParams struct {
	ID          uuid.UUID
	Title       string
	Description string
}

func (q *Queries) CreateFeed(ctx context.Context, arg CreateFeedParams) (Feed, error) {
	row := q.db.QueryRowContext(ctx, createFeed, arg.ID, arg.Title, arg.Description)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createFeeder = `-- name: CreateFeeder :one
insert into
    feeders (id, name, link)
values ($1, $2, $3)
returning
    id, name, link, created_at, updated_at
`

type CreateFeederParams struct {
	ID   uuid.UUID
	Name string
	Link string
}

func (q *Queries) CreateFeeder(ctx context.Context, arg CreateFeederParams) (Feeder, error) {
	row := q.db.QueryRowContext(ctx, createFeeder, arg.ID, arg.Name, arg.Link)
	var i Feeder
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Link,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getFeeders = `-- name: GetFeeders :many
select id, name, link, created_at, updated_at from feeders
`

func (q *Queries) GetFeeders(ctx context.Context) ([]Feeder, error) {
	rows, err := q.db.QueryContext(ctx, getFeeders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Feeder
	for rows.Next() {
		var i Feeder
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Link,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
